[user]
	email = jamie@hexdigital.com
	name = Jamie Warburton
[alias]
    # Amend commits
        amend = commit --amend

    # Show the most recent 10 branches that were worked on
        recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"

    # Show a list of today’s work - use --since to change the time
        today = log --since=00:00:00 --all --no-merges --oneline --author=jamie@hexdigital.com

    # Remind yourself what you’ve been up to
        recap = log --all --oneline --no-merges --author=jamie@hexdigital.com

    # Check which changes you’re about to pull - add HEAD..origin/master to the end
        upstream = log --oneline --no-merges
    # Review what you’re about to push -  add origin/master..HEAD to the end
        local = log --oneline --no-merges

    # Generate a diff without diff-so-fancy and no colours
        patch = !git --no-pager diff --no-color

    # List commits
    # List commits in short form, with colors and branch/tag annotations.
        ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    # List commits showing changed files
        ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    # List with no colours (in case need to chain output with Unix pipes)
        lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    # List oneline commits showing dates
        lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    # List oneline commits showing relative dates
        ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    # List default look for short git log
        le = log --oneline --decorate

    # History of a file
        filelog = log -u
        fl = log -u

    # Inspect recent history
    # Show modified files in last commit
        dl = "!git ll -1"
    # Show a diff last commit
        dlc = diff --cached HEAD^
    # Show content (full diff) of a commit given a revision
        dr  = "!f() { git diff "$1"^.."$1"; }; f"
        lc  = "!f() { git ll "$1"^.."$1"; }; f"
        diffr  = "!f() { git diff "$1"^.."$1"; }; f"

    # Finding files and content inside files
    # Find a file path in codebase
        find = "!git ls-files | grep -i"

    # List all aliases
        la = "!git config -l | grep alias | cut -c 7-"

    # Assume aliases
    # Assume a file as unchanged
        assume = update-index --assume-unchanged
    # Unassume a file
        unassume = update-index --no-assume-unchanged
    # Show assumed files
        assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    # Unassume all the assumed files
        unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    # Assume all
        assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    # Show the last tag
        lasttag = describe --tags --abbrev=0
        lt = describe --tags --abbrev=0

    # Merge aliases
        ours = "!f() { git co --ours $@ && git add $@; }; f"
        theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    # Reset Commands
        r = reset
        r1 = reset HEAD^
        r2 = reset HEAD^^
        rh = reset --hard
        rh1 = reset HEAD^ --hard
        rh2 = reset HEAD^^ --hard

    # Stash Commands
        sl = stash list
        sa = stash apply
        ss = stash save
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
[color]
	ui = true
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
    newHighlight = green bold 22
[color "diff"]
	meta = 227
	frag = magenta bold
	commit = 227 bold
	old = red bold
	new = green bold
	whitespace = red reverse
[rerere]
	enabled = true
